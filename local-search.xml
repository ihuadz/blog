<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>英语动词时态例句</title>
    <link href="/2023/08/02/ELearn-001%E5%8A%A8%E8%AF%8D%E6%97%B6%E6%80%81%E4%BE%8B%E5%8F%A5/"/>
    <url>/2023/08/02/ELearn-001%E5%8A%A8%E8%AF%8D%E6%97%B6%E6%80%81%E4%BE%8B%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="英语动词时态例句"><a href="#英语动词时态例句" class="headerlink" title="英语动词时态例句"></a>英语动词时态例句</h2><table><thead><tr><th>时间\时态</th><th>简单时态</th><th>进行时态</th><th>完成时态</th><th>完成进行时态</th></tr></thead><tbody><tr><td>现在</td><td>She goes shopping every Saturday. (她每个星期六去购物。)</td><td>She is going shopping right now. (她正在去购物。)</td><td>She has already gone shopping. (她已经去购物了。)</td><td>She has been going shopping for two hours. (她已经去购物两个小时了。)</td></tr><tr><td>过去</td><td>She went shopping last Sunday. (她上个星期天去购物了。)</td><td>She was going shopping when I called. (我给她打电话时，她正在去购物。)</td><td>She had already gone shopping when her friends arrived. (她的朋友到达时，她已经去购物了。)</td><td>She had been going shopping for two hours before the mall closed. (购物中心关门前，她已经去购物两个小时了。)</td></tr><tr><td>将来</td><td>She will go shopping tomorrow. (她明天会去购物。)</td><td>She will be going shopping at this time tomorrow. (明天这个时候，她将在去购物的路上。)</td><td>She will have gone shopping by the time you arrive. (到你到达的时候，她会已经去购物了。)</td><td>She will have been going shopping for three hours by 5 PM. (到下午5点，她将已经去购物三个小时了。)</td></tr><tr><td>过去将来</td><td>She said she would go shopping last weekend, but she couldn’t. (她说上个周末会去购物，但她没去成。)</td><td>She said she would be going shopping at this time last Saturday. (她说上个星期六这个时候会去购物。)</td><td>She said she would have gone shopping before the store closed. (她说店关门前会去购物。)</td><td>She said she would have been going shopping for two hours by the time her friends arrived. (她说她的朋友到达时，她已经去购物两个小时了。)</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.NET学习计划</title>
    <link href="/2023/05/31/DotNET-000%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <url>/2023/05/31/DotNET-000%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="NET学习计划"><a href="#NET学习计划" class="headerlink" title=".NET学习计划"></a>.NET学习计划</h1><p>因为要上班，学习的时候总是东一榔头西一斧头的，导致啥啥都学不好，还经常忘记，本篇文章暂拟一个计划，深入学习DotNET。由于是空余时间学习，就按照这个计划推进吧，在学习过程中逐渐优化，加油吧！</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ol><li><p>确定学习目标：</p><ul><li><p><a href="https://hengyu.club/2023/05/30/DotNET-001.Net%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86/" title=".NET-001.Net平台的概念和组成部分">了解.Net平台的概念和组成部分</a> </p></li><li><p><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/" title="C#官方文档">学习 C# 编程语言。</a> </p></li><li><p><a href="https://learn.microsoft.com/zh-cn/aspnet/core/?view=aspnetcore-7.0" title="ASP.NET 文档 | Microsoft Learn">掌握 ASP.NET Core 开发。</a> </p></li><li><p><a href="https://learn.microsoft.com/zh-cn/ef/" title="实体框架文档中心 | Microsoft Learn">学习使用 Entity Framework Core 进行数据库开发。</a> </p></li><li><p><a href="https://learn.microsoft.com/zh-cn/visualstudio/?view=vs-2022" title="Visual Studio 产品系列文档 | Microsoft Learn">掌握常用的 .NET 开发工具和技术。</a></p></li></ul></li><li><p>学习基础知识：</p><ul><li><input checked="" disabled="" type="checkbox"> 学习 C# 编程语言基础，包括语法、数据类型、控制流等。</li><li><input checked="" disabled="" type="checkbox"> <a href="https://hengyu.club/2023/05/31/DotNET-002%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/">了解面向对象编程（OOP）的基本概念和原则。</a> </li><li><input checked="" disabled="" type="checkbox"> 学习使用 Visual Studio 或者 Visual Studio Code 进行 .NET 开发。</li></ul></li><li><p>深入学习 .NET 平台和核心概念：</p><ul><li><input checked="" disabled="" type="checkbox"> 了解 .NET 平台的历史和演变。</li><li><input checked="" disabled="" type="checkbox"> 学习 .NET 标准库和常用的命名空间。（太多了，持续学习中…）</li><li><input checked="" disabled="" type="checkbox"> 了解 .NET Core 和 .NET Framework 的区别和共同点。(最大区别，跨平台..)</li></ul></li><li><p>学习 ASP.NET Core 开发：</p><ul><li><input checked="" disabled="" type="checkbox"> 了解 ASP.NET Core 的基本概念和架构。</li><li><input checked="" disabled="" type="checkbox"> 学习使用 MVC（模型-视图-控制器）或者 Razor Pages 进行 Web 开发。</li><li><input checked="" disabled="" type="checkbox"> 掌握路由、中间件、模型绑定、身份验证和授权等核心功能。</li><li><input checked="" disabled="" type="checkbox"> 学习前端开发技术，如 HTML、CSS 和 JavaScript。</li></ul></li><li><p>数据库开发：</p><ul><li><input disabled="" type="checkbox"> 学习使用 Entity Framework Core 进行数据库访问和操作。</li><li><input disabled="" type="checkbox"> 掌握数据库迁移和代码优先开发的概念和实践。</li><li><input disabled="" type="checkbox"> 了解常见的数据库管理系统，如 SQL Server、MySQL 或者 PostgreSQL。</li></ul></li><li><p>学习资源和实践：</p><ul><li><input disabled="" type="checkbox"> 阅读官方文档和教程，如 Microsoft 的官方文档和 ASP.NET Core 文档。</li><li><input disabled="" type="checkbox"> 参加在线课程或者培训班，如 Microsoft Learn 或者 Pluralsight 提供的相关课程。</li><li><input disabled="" type="checkbox"> 参与开发社区和论坛，与其他开发者交流和分享经验。</li><li><input disabled="" type="checkbox"> 尝试编写小型项目或者参与开源项目，实践所学知识。</li></ul></li><li><p>学习开源框架研究源码</p><ul><li><input disabled="" type="checkbox"> 学习研究公司框架源码</li><li><input disabled="" type="checkbox"> 学习研究Furion框架</li><li><input disabled="" type="checkbox"> 学习研究FreeSql框架-与EFCore比较</li></ul></li><li><p>持续学习和更新：</p><ul><li><input disabled="" type="checkbox"> 订阅 .NET 相关的博客、新闻和邮件列表，了解最新的技术动态。</li><li><input disabled="" type="checkbox"> 参与技术会议和线下活动，与其他开发者面对面交流和学习。</li><li><input disabled="" type="checkbox"> 持续关注 .NET 社区的发展和新兴技术，不断扩展自己的知识面。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>.Net</category>
      
    </categories>
    
    
    <tags>
      
      <tag>.Net</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.Net平台的概念和组成部分</title>
    <link href="/2023/05/30/DotNET-001.Net%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86/"/>
    <url>/2023/05/30/DotNET-001.Net%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Net平台的概念和组成部分"><a href="#Net平台的概念和组成部分" class="headerlink" title=".Net平台的概念和组成部分"></a>.Net平台的概念和组成部分</h1><p>.NET 平台是一个跨平台的软件开发平台，由微软公司开发和维护。它提供了一个统一的环境和工具集，用于开发和执行各种类型的应用程序，包括桌面应用程序、Web 应用程序、移动应用程序、云服务等。下面是.NET 平台的概念和组成部分的介绍：</p><h3 id="Common-Language-Runtime-CLR"><a href="#Common-Language-Runtime-CLR" class="headerlink" title="Common Language Runtime (CLR)"></a>Common Language Runtime (CLR)</h3><p>CLR 是.NET 平台的核心组件之一，它提供了应用程序的执行环境。CLR 负责将.NET 程序编译为中间语言（IL）并执行，同时处理内存管理、安全性、异常处理等运行时任务。</p><h3 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h3><p>.NET Framework 是最早引入的.NET 平台版本，它是一个用于构建 Windows 应用程序的完整开发框架。它包括了大量的类库、工具和运行时环境，支持多种编程语言（如C#、VB.NET 和 F#）。</p><h3 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a>.NET Core</h3><p>.NET Core 是.NET 平台的开源版本，它是跨平台的，可以在 Windows、Linux 和 macOS 等操作系统上运行。.NET Core 面向云和容器化应用开发，具有更轻量级的体积和更高的性能。</p><h3 id="ASP-NET"><a href="#ASP-NET" class="headerlink" title="ASP.NET"></a>ASP.NET</h3><p>ASP.NET 是.NET 平台的 Web 开发框架，用于构建动态的、可扩展的 Web 应用程序。它提供了一组强大的工具和功能，包括模型-视图-控制器（MVC）模式、Web API、身份验证、授权等。</p><h3 id="Entity-Framework"><a href="#Entity-Framework" class="headerlink" title="Entity Framework"></a>Entity Framework</h3><p>Entity Framework 是.NET 平台的对象关系映射（ORM）框架，用于简化与数据库的交互和数据持久化。它提供了一种面向对象的方式来操作数据库，支持多种数据库管理系统。</p><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p>.NET 平台支持多种编程语言，包括C#、VB.NET、F#等。C# 是.NET 平台的主要语言之一，它是一种现代、面向对象的编程语言，用于开发各种类型的应用程序。</p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p>在.NET 平台上开发应用程序时，常用的开发工具包括 Visual Studio 和 Visual Studio Code。Visual Studio 是一个强大的集成开发环境（IDE），提供了丰富的功能和工具，简化开发过程。</p><h3 id="NuGet"><a href="#NuGet" class="headerlink" title="NuGet"></a>NuGet</h3><p>NuGet 是.NET 平台的软件包管理系统，用于方便地添加、更新和管理项目所依赖的第三方库和工具。</p>]]></content>
    
    
    <categories>
      
      <category>.Net</category>
      
    </categories>
    
    
    <tags>
      
      <tag>.Net</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.NET面向对象编程</title>
    <link href="/2023/05/30/DotNET-002%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/05/30/DotNET-002%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>面向对象编程（Object-Oriented Programming，简称OOP）是一种常用的编程范式，它以对象为基本单位，通过封装、继承和多态等概念来组织和构建程序。</p><p>在面向对象编程中，一个对象是由数据（属性）和操作（方法）组成的实体。对象可以互相通信和交互，通过调用彼此的方法来实现各种功能。以下是面向对象编程中的一些关键概念：</p><h3 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h3><p>类是对象的模板或蓝图，描述了对象的属性和方法。它定义了对象共享的特征和行为。类是创建对象的基础，可以看作是对象的类型。</p><h3 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h3><p>对象是类的实例，具体的实体。它具有类定义的属性和方法，并且可以进行特定的操作。每个对象都是独立的，拥有自己的状态。</p><h3 id="封装（Encapsulation）"><a href="#封装（Encapsulation）" class="headerlink" title="封装（Encapsulation）"></a>封装（Encapsulation）</h3><p>封装是将数据和方法组合在一个单元内，对外部隐藏对象的内部实现细节。通过封装，对象的内部状态和实现细节对外部是不可见的，只有通过公开的接口（方法）来访问和操作对象。</p><h3 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h3><p>继承是一种通过扩展现有类来创建新类的机制。子类可以继承父类的属性和方法，并可以新增或修改其行为。继承使得代码重用变得更加容易，同时可以建立类之间的层次关系。</p><h3 id="多态（Polymorphism）"><a href="#多态（Polymorphism）" class="headerlink" title="多态（Polymorphism）"></a>多态（Polymorphism）</h3><p>多态是指在父类的引用中使用子类的对象。多态允许使用统一的接口来处理不同的对象，通过动态绑定，可以在运行时确定要调用的方法。</p><h3 id="面向对象编程的优点"><a href="#面向对象编程的优点" class="headerlink" title="面向对象编程的优点"></a>面向对象编程的优点</h3><ul><li>模块化：通过封装和抽象，代码可以被组织成独立的模块，便于理解和维护。</li><li>代码重用：通过继承和多态，可以有效地重用已有的代码，减少重复编写相似功能的工作。</li><li>可扩展性：面向对象编程提供了良好的扩展性，可以通过新增类和修改现有类来扩展程序的功能。</li><li>更易于理解：面向对象编程提供了一种自然的、类似现实世界的抽象方式，使得代码更易于理解和交流。</li></ul>]]></content>
    
    
    <categories>
      
      <category>.Net</category>
      
    </categories>
    
    
    <tags>
      
      <tag>.Net</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2023/05/19/000-%E7%AC%AC%E4%B8%80%E7%AF%87BLOG/"/>
    <url>/2023/05/19/000-%E7%AC%AC%E4%B8%80%E7%AF%87BLOG/</url>
    
    <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>第一篇博客也不知道写点啥，就先写一下如何建站的吧！</p><p>首先，为啥要弄这个博客呢？</p><ul><li><p>一个程序员的好奇心</p></li><li><p>真的想学点东西</p></li><li><p>装x</p></li></ul><p>就是这几点原因造就了这个站点，下面说一下技术吧。</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>这就不用多说了，点击快速建站<a href="https://hexo.io/zh-cn/index.html" title="Hexo主页">Hexo</a>。这是我接触到的第一个博客框架，没用过其他的，感觉上手还是挺简单的，官网介绍的比较详细，轻松运行。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>我用的是Fluid，点击<a href="https://hexo.fluid-dev.com/docs/start/#%E6%90%AD%E5%BB%BA-hexo-%E5%8D%9A%E5%AE%A2">Fluid官方介绍</a> ，各主题应该大同小异可去Hexo官网选择。</p><h2 id="站点计数与评论"><a href="#站点计数与评论" class="headerlink" title="站点计数与评论"></a>站点计数与评论</h2><p>计数和评论放在一起是因为都用到了<a href="https://www.leancloud.cn/">LeanCloud</a>，一个基于Docker的云计算平台，分国内版和海外版，我用的是海外版，因为不需要实名。计数和评论都调用了此平台的API，网上有很多其他博主写的详细教程。</p><p>评论功能还用到了<a href="https://vercel.com/dashboard">Vercel</a>，一个网站托管服务，类似GitHub Pages，主要用它部署了<a href="https://waline.js.org/">Waline</a>，一款简洁安全的评论系统，挺牛的系统，登录、回复、表情、图片、管理评论啥啥都有。</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>之前申请过阿里、腾讯的域名，那一个麻烦申请过的朋友应该都清楚，也是准备建站的时候才了解到<a href="https://namesilo-china.com/">NameSilo</a>，国外的一个域名服务网站，价格低，主要是续费也是差不多价格，学习使用域名的话，这个挺好的，还可以配置50个二级域名，自己玩够够的了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次写博客，不知道写啥，慢慢学习吧。</p><p>上面说到的技术都是粗略介绍了一下，之后有时间或者有需求的话做个系列介绍。</p><p>学习的时间不多，逐渐优化完善吧。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
